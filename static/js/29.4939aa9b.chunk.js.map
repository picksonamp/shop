{"version":3,"file":"static/js/29.4939aa9b.chunk.js","mappings":"uSAEMA,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEC,QAA2D,IAAnDL,EAAQK,KAElBC,KAAKD,IACJ,MAAO,GAAGA,KACA,SAARA,GArBWE,EAsBGP,EAAQO,KArBvBA,GACDZ,EAAQa,IAAID,KAChBV,GAAU,EACVF,EAAQc,IAAIF,EAAMV,EAAOa,aAFKf,EAAQgB,IAAIJ,IADxB,KAsBRP,EAAQK,KAvBpB,IAAmBE,CAwBX,IAEHG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAd,EAAAe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBjB,EAEjB,GACyC,qBAAhCqB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASR,EAAQS,wBAWvB,OAVAR,EAASI,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQX,EACRY,kBAC+B,kBAAtBzB,EAAQ0B,UAAyB1B,EAAQ0B,UAAY,EAC9DC,KAAM,EACNC,mBAAoBP,EACpBQ,iBAAkBR,EAClBS,WAAYT,IAEP,MAGT,CAEA,MAAM,GAAEU,EAAA,SAAIC,EAAA,SAAUC,GApFxB,SAAwBjC,GAEtB,MAAM+B,EAAKhC,EAAYC,GACvB,IAAIkC,EAAWzC,EAAYkB,IAAIoB,GAE/B,IAAKG,EAAU,CAEb,MAAMD,EAAW,IAAIvC,IAErB,IAAIyC,EAEJ,MAAMH,EAAW,IAAIZ,sBAAsBgB,IACzCA,EAAQC,SAASC,IAvEvB,IAAAC,EA0EQ,MAAMC,EACJF,EAAMf,gBACNY,EAAWM,MAAMf,GAAcY,EAAMb,mBAAqBC,IAGxD1B,EAAQ0C,iBAA8C,qBAApBJ,EAAMK,YAG1CL,EAAMK,UAAYH,GAGpB,OAAAD,EAAAN,EAAStB,IAAI2B,EAAMd,UAAnBe,EAA4BF,SAASvB,IACnCA,EAAS0B,EAAQF,EAAM,GACvB,GACF,GACDtC,GAGHmC,EACEH,EAASG,aACRS,MAAMC,QAAQ7C,EAAQ0B,WACnB1B,EAAQ0B,UACR,CAAC1B,EAAQ0B,WAAa,IAE5BQ,EAAW,CACTH,KACAC,WACAC,YAGFxC,EAAYgB,IAAIsB,EAAIG,EACtB,CAEA,OAAOA,CACT,CAmCqCY,CAAe9C,GAG5C+C,EAAYd,EAAStB,IAAIE,IAAY,GAQ3C,OAPKoB,EAASzB,IAAIK,IAChBoB,EAASxB,IAAII,EAASkC,GAGxBA,EAAUC,KAAKlC,GACfkB,EAASpB,QAAQC,GAEV,WAELkC,EAAUE,OAAOF,EAAUG,QAAQpC,GAAW,GAErB,IAArBiC,EAAU/B,SAEZiB,EAASkB,OAAOtC,GAChBmB,EAASoB,UAAUvC,IAGC,IAAlBoB,EAASoB,OAEXrB,EAASsB,aACT7D,EAAY0D,OAAOpB,GAEvB,CACF,CC1GkCwB,EAAAA,UC1DlC,MAAMC,EAAuBD,EAAAA,cAAoB,CAAC,GAG5CE,GAAyB,EAE/B,SAASC,EAA2BC,GAAgK,IAA/J,UAAEC,EAAS,eAAEC,EAAc,MAAEC,EAAK,OAAEC,EAAM,aAAEC,EAAY,OAAEC,EAAM,UAAEC,EAAS,SAAEC,EAAQ,gBAAEC,EAAkBX,EAAsB,0BAAEY,GAA4BV,EAC9L,MAAMW,EAAQ,CAAC,EAqBf,MApBkB,QAAdJ,IACAI,EAAM,yBAA2B,WACb,kBAAbH,IACPG,EAAM,wBAA0B,GAAGH,MAClCC,IACDE,EAAM,4BAA8B,QACnB,kBAAVR,GAAuC,kBAAVA,IACpCQ,EAAMR,MAAQA,GACI,kBAAXC,GAAyC,kBAAXA,IACrCO,EAAMP,OAASA,GACS,kBAAjBC,GAAqD,kBAAjBA,IAC3CM,EAAMN,aAAeA,GACrBC,IACAK,EAAMN,aAAe,OACA,qBAAdJ,IACPU,EAAM,gBAAkBV,GACE,qBAAnBC,IACPS,EAAM,qBAAuBT,GACQ,kBAA9BQ,IACPC,EAAM,iCAAmCD,GACtCC,CACX,CACA,SAASC,EAAQC,GAAmK,IAAlK,MAAEC,EAAQ,EAAGC,QAASC,EAASC,UAAWC,EAAe,mBAAEC,EAAkB,gBAAEC,EAAe,OAAEd,GAAS,EAAOK,MAAOU,KAAcC,GAA2BT,EAC9K,IAAIjC,EAAI2C,EAAIC,EACZ,MAAMC,EAAsB7B,EAAAA,WAAiBC,GACvC6B,EAAoB,IAAKJ,GAG/B,IAAK,MAAO5E,EAAKiF,KAAUrF,OAAOmC,QAAQ6C,GACjB,qBAAVK,UACAD,EAAkBhF,GAIjC,MAAMkF,EAAe,IACdH,KACAC,EACHpB,UAGEK,EAAQ,IACPU,KACAtB,EAA4B6B,IAEnC,IAAIX,EAAY,yBACZC,IACAD,GAAa,IAAIC,KACrB,MAAMW,EAAwC,QAA9BjD,EAAKgD,EAAaC,cAA2B,IAAPjD,GAAgBA,EAChEN,EAAW,GACXwD,EAAYC,KAAKC,KAAKlB,GAC5B,IAAK,IAAImB,EAAI,EAAGA,EAAIH,EAAWG,IAAK,CAChC,IAAIC,EAAYvB,EAChB,GAAImB,EAAYhB,GAASmB,IAAMH,EAAY,EAAG,CAO1C,MAAM3B,EAAmC,QAA1BoB,EAAKW,EAAU/B,aAA0B,IAAPoB,EAAgBA,EAAK,OAChEY,EAAiBrB,EAAQ,EACzBsB,EAAmC,kBAAVjC,EACzBA,EAAQgC,EACR,QAAQhC,OAAWgC,KACzBD,EAAY,IAAKA,EAAW/B,MAAOiC,EACvC,CACA,MAAMC,EAAgBzC,EAAAA,cAAoB,OAAQ,CAAEqB,UAAWA,EAAWN,MAAOuB,EAAWxF,IAAKuF,GAAK,UAClGJ,EACAvD,EAASe,KAAKgD,GAKd/D,EAASe,KAAKO,EAAAA,cAAoBA,EAAAA,SAAgB,CAAElD,IAAKuF,GACrDI,EACAzC,EAAAA,cAAoB,KAAM,OAEtC,CACA,OAAQA,EAAAA,cAAoB,OAAQ,CAAEqB,UAAWE,EAAoB,cAAeC,EAAiB,YAAa,SAAU,YAAqD,QAAvCI,EAAKI,EAAanB,uBAAoC,IAAPe,EAAgBA,EAAK1B,GAA0BkB,EAClO1C,EAAS3B,KAAI,CAAC2F,EAAIL,IAAMrC,EAAAA,cAAoBoB,EAAS,CAAEtE,IAAKuF,GAAKK,KACjEhE,EACV,CC7FA,QAAgC,yCAAhC,EAAyG,yDAAzG,EAA0L,iDAA1L,EAAiQ,+C,aCKjQ,MAkBA,EAlBqBiE,KAGjBC,EAAAA,EAAAA,MAAA,OAAKvB,UAAWN,EAAoB8B,SAAA,EAClCC,EAAAA,EAAAA,KAAA,OAAKzB,UAAWN,EAAoC8B,UAClDC,EAAAA,EAAAA,KAAC9B,EAAQ,CAACR,OAAQ,IAAKD,MAAO,SAGhCqC,EAAAA,EAAAA,MAAA,OAAKvB,UAAWN,EAA4B8B,SAAA,EAC1CC,EAAAA,EAAAA,KAAC9B,EAAQ,CAACK,UAAWN,KACrB+B,EAAAA,EAAAA,KAAC9B,EAAQ,CAACK,UAAWN,UCf7B,EAA+B,2BAA/B,EAAyF,2CAAzF,EAA2J,mCAA3J,EAAmN,iCAAnN,EAAkQ,0BAAlQ,EAAiT,iCAAjT,EAAwW,kC,cCMxW,MA8DA,EA9DgCX,IAAyD,IAAxD,GAAE5B,EAAE,MAAEuE,EAAK,MAAEC,EAAK,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAU/C,EAE/E,MAAM2B,GAAQqB,EAAAA,EAAAA,YAAWC,EAAAA,GAEnBC,GAAWC,EAAAA,EAAAA,OAEVC,EAAaC,GAAkBzD,EAAAA,SAAe,8BAC9C0D,EAAYC,GAAiB3D,EAAAA,SAAe,OAuBnD,OAEY4C,EAAAA,EAAAA,MAAA,OACAvB,UAAWN,EACXvC,GAAIoF,OAAOpF,GACfqE,SAAA,EAEIC,EAAAA,EAAAA,KAAA,OAAKzB,UAAWN,EAAmC8B,UAC/CC,EAAAA,EAAAA,KAAA,OACIe,IAAKX,EACLY,QAAQ,OACRC,IAAI,qBAGZnB,EAAAA,EAAAA,MAAA,OAAKvB,UAAWN,EAA2B8B,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAKzB,UAAWN,EAAyB8B,SAAEE,KAC3CH,EAAAA,EAAAA,MAAA,OAAKvB,UAAWN,EAAkB8B,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKzB,UAAWN,EAAyB8B,SAAEG,EAAQ,OACnDF,EAAAA,EAAAA,KAAA,UACIzB,UAAWN,EACXiD,QAzCJC,KAEhBlC,EAAMmC,kBAAkB,CACpBf,WACAF,cACAzE,KACA0E,QACAF,QACAD,UAIJnF,OAAOuG,SAAS,CACZC,IAAK,EACLC,SAAU,SAGdf,EAAS,aAAa,EAwBmBT,SAEpBa,YAIX,ECvClB,EAlBoCtD,IAAyD,IAAxD,GAAE5B,EAAE,MAAEuE,EAAK,MAAEC,EAAK,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAU/C,EAEnF,MAAMkE,EAAO,CAAE9F,KAAIuE,QAAOC,QAAOC,cAAaC,QAAOC,aAE/C,IAAEoB,EAAG,OAAEtF,GCyBV,WAW0C,IAXvB,UACxBd,EAAA,MACAqG,EAAA,gBACArF,EAAA,WACAsF,EAAAzH,KACAA,EAAA,YACA0H,EAAA,KACAC,EAAA,cACAC,EAAA,eACAjH,EAAA,SACAkH,GACFrH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAwB,EA+CE,MAAOuF,EAAKO,GAAgBC,EAAAA,SAAyB,MAC/CxH,EAAiBwH,EAAAA,UAChBC,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9C9F,SAAU2F,EACV7F,WAAO,IAKTxB,EAAS2H,QAAUL,EAGbE,EAAAA,WACJ,KAEE,GAAIJ,IAASJ,EAAK,OAElB,IAAI1E,EA4BJ,OA3BAA,EAAYxC,EACVkH,GACA,CAACtF,EAAQF,KACPkG,EAAS,CACPhG,SACAF,UAEExB,EAAS2H,SAAS3H,EAAS2H,QAAQjG,EAAQF,GAE3CA,EAAMf,gBAAkB0G,GAAe7E,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE7C,OACAyH,aACAtG,YAEAgB,kBAEAqF,SAEF7G,GAGK,KACDkC,GACFA,GACF,CACD,GAIH,CAEER,MAAMC,QAAQnB,GAAaA,EAAUhB,WAAagB,EAClDoG,EACAvH,EACAyH,EACAC,EACAC,EACAxF,EACAxB,EACA6G,IAIJ,MAAMW,EAAc,OAAAnG,EAAAgG,EAAMjG,YAAN,EAAAC,EAAaf,OAC3BmH,EAA4BL,EAAAA,SAE/BR,IACDY,GACCT,GACAC,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACPhG,SAAU2F,EACV7F,WAAO,KAIX,MAAMsG,EAAS,CAACP,EAAQE,EAAM/F,OAAQ+F,EAAMjG,OAO5C,OAJAsG,EAAOd,IAAMc,EAAO,GACpBA,EAAOpG,OAASoG,EAAO,GACvBA,EAAOtG,MAAQsG,EAAO,GAEfA,CACT,CDlI4BC,CAAU,CAC9BZ,aAAa,EACbvG,UAAW,KAGf,OACI2E,EAAAA,EAAAA,KAAA,OAAKyB,IAAKA,EAAI1B,SAEN5D,GAAS6D,EAAAA,EAAAA,KAACyC,EAAI,IAAMjB,KAAWxB,EAAAA,EAAAA,KAACH,EAAY,KAE7C,EEnBf,EAAiC,oCAAjC,EAAoF,kCAApF,EAAmI,gCCoCnI,EA/B0CvC,IAA4B,IAA3B,OAAEoF,EAAM,UAAEC,GAAWrF,GAE9CgD,EAAAA,EAAAA,YAAkBC,EAAAA,GAUhC,OACIP,EAAAA,EAAAA,KAAA,OAAKzB,UAAWN,EAAqB8B,UAC7BD,EAAAA,EAAAA,MAAA,QAAM8C,SANIC,IAClBA,EAAMC,gBAAgB,EAKe/C,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SACIzB,UAAWN,EACX8E,KAAK,OACLC,YAAY,YACZ/D,MAAOyD,EACPX,SAhBEkB,GAA2CN,EAAUM,EAAE9H,OAAO8D,OAiBhEiC,QAfC+B,GAA0CN,EAAU,OAiBrD3C,EAAAA,EAAAA,KAAA,OAAKzB,UAAWN,EACZ8C,IAAI,wFAEd,EC/BlB,EAA6B,mCAA7B,EAAmF,yCCItEmC,EAAqE5F,IAMvE,IALH,SACA+C,EAAQ,YACR8C,EAAW,WACXC,EAAU,cACVC,GACH/F,EAED,MAAMgG,EAAwBT,IAC1BM,EAAYN,EAAMU,cAAchF,UAAU,EAGxCiF,EAA0BnD,GACvBA,GAAgC,IAApBA,EAAS1F,OAInB0F,EAAS,GAAGoD,cAAgBpD,EAASqD,MAAM,GAHvCrD,EAOf,OACIP,EAAAA,EAAAA,MAAA,OAAKvB,UAAWN,EAAiB8B,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wGACJC,EAAAA,EAAAA,KAAA,MAAIzB,UAAWN,EAAuB8B,SAAGM,EAAmBmD,EAAuBnD,GAA/B,SACpDL,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAKkB,QAASA,IAAMiC,EAAY,IAAIpD,SAAC,QAEjCqD,EAAWnJ,KAAI,CAAC0J,EAAKC,KACjB5D,EAAAA,EAAAA,KAAA,OACQzB,UAAWoF,EACXzC,QAASoC,EAAqBvD,SAC7ByD,EAAuBG,IAHnBC,OAOnB,ECxCd,GAAgB,gBAAkB,+BAA+B,SAAW,wBAAwB,MAAQ,sBCS7F,SAASC,IAGpB,MAAM5E,GAAQqB,EAAAA,EAAAA,YAAkBC,EAAAA,IAEzBS,EAAS8C,GAAc5G,EAAAA,UAAe,IAEtCwF,EAAQC,GAAazF,EAAAA,SAAe,KACpCkG,EAAYC,GAAiBnG,EAAAA,SAAyB,CAAC,MACvDmD,EAAU8C,GAAejG,EAAAA,SAAuB,IAUvD,OARAA,EAAAA,WAAgB,KACZ6G,MAAM,gDACDC,MAAKC,GAAOA,EAAIC,SAChBF,MAAKE,GAAQb,EAAca,KAC3BC,SAAQ,IAAML,GAAW,IAAO,GACtC,KAIChE,EAAAA,EAAAA,MAAA,OAAKvB,UAAWN,EAAMmG,gBAAgBrE,SAAA,EAClCD,EAAAA,EAAAA,MAAA,OAAKvB,UAAWN,EAAMoG,SAAStE,SAAA,EAC3BC,EAAAA,EAAAA,KAACsE,EAAW,CAAC5B,OAAQA,EAAQC,UAAWA,KACxC3C,EAAAA,EAAAA,KAACkD,EAAc,CACXE,WAAYA,EACZC,cAAeA,EACfhD,SAAUA,EACV8C,YAAaA,QAKrBnD,EAAAA,EAAAA,KAAA,OAAKzB,UAAWN,EAAMsG,MAAMxE,SACvBiB,EACGzE,MAAM,GACDiI,KAAK,IACLvK,KAAI,CAACwK,EAAGb,KAAU5D,EAAAA,EAAAA,KAACH,EAAY,GAAM+D,KAE1C3E,EAAMyF,SACD3K,QAAO4K,GAAWA,EAAQ1E,MAAM2E,oBAAoBC,SAASnC,EAAOkC,uBACpE7K,QAAO4K,GAAWA,EAAQtE,SAASuE,oBAAoBC,SAASxE,EAASuE,uBACzE3K,KAAK0K,IAAsB3E,EAAAA,EAAAA,KAAC8E,EAAQ,IAAsBH,GAAhBA,EAAQjJ,UAK3E,C","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-loading-skeleton/dist/index.js","webpack://shop/./src/components/cards/card/SkeletonCardStyle.module.css?b1e3","components/cards/card/SkeletonCard.tsx","webpack://shop/./src/components/cards/card/Card.module.css?436f","components/cards/card/Card.tsx","components/cards/card/LazyCard.tsx","../node_modules/react-intersection-observer/src/useInView.tsx","webpack://shop/./src/components/cards/searchField/searchField.module.css?e796","components/cards/searchField/SearchField.tsx","webpack://shop/./src/components/cards/categoriesList/categoriesList.module.css?34be","components/cards/categoriesList/CategoriesList.tsx","webpack://shop/./src/components/cards/Cards.module.css?f37b","components/cards/Cards.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","'use client';\nimport React from 'react';\n\n/**\n * @internal\n */\nconst SkeletonThemeContext = React.createContext({});\n\n/* eslint-disable react/no-array-index-key */\nconst defaultEnableAnimation = true;\n// For performance & cleanliness, don't add any inline styles unless we have to\nfunction styleOptionsToCssProperties({ baseColor, highlightColor, width, height, borderRadius, circle, direction, duration, enableAnimation = defaultEnableAnimation, customHighlightBackground, }) {\n    const style = {};\n    if (direction === 'rtl')\n        style['--animation-direction'] = 'reverse';\n    if (typeof duration === 'number')\n        style['--animation-duration'] = `${duration}s`;\n    if (!enableAnimation)\n        style['--pseudo-element-display'] = 'none';\n    if (typeof width === 'string' || typeof width === 'number')\n        style.width = width;\n    if (typeof height === 'string' || typeof height === 'number')\n        style.height = height;\n    if (typeof borderRadius === 'string' || typeof borderRadius === 'number')\n        style.borderRadius = borderRadius;\n    if (circle)\n        style.borderRadius = '50%';\n    if (typeof baseColor !== 'undefined')\n        style['--base-color'] = baseColor;\n    if (typeof highlightColor !== 'undefined')\n        style['--highlight-color'] = highlightColor;\n    if (typeof customHighlightBackground === 'string')\n        style['--custom-highlight-background'] = customHighlightBackground;\n    return style;\n}\nfunction Skeleton({ count = 1, wrapper: Wrapper, className: customClassName, containerClassName, containerTestId, circle = false, style: styleProp, ...originalPropsStyleOptions }) {\n    var _a, _b, _c;\n    const contextStyleOptions = React.useContext(SkeletonThemeContext);\n    const propsStyleOptions = { ...originalPropsStyleOptions };\n    // DO NOT overwrite style options from the context if `propsStyleOptions`\n    // has properties explicity set to undefined\n    for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n        if (typeof value === 'undefined') {\n            delete propsStyleOptions[key];\n        }\n    }\n    // Props take priority over context\n    const styleOptions = {\n        ...contextStyleOptions,\n        ...propsStyleOptions,\n        circle,\n    };\n    // `styleProp` has the least priority out of everything\n    const style = {\n        ...styleProp,\n        ...styleOptionsToCssProperties(styleOptions),\n    };\n    let className = 'react-loading-skeleton';\n    if (customClassName)\n        className += ` ${customClassName}`;\n    const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n    const elements = [];\n    const countCeil = Math.ceil(count);\n    for (let i = 0; i < countCeil; i++) {\n        let thisStyle = style;\n        if (countCeil > count && i === countCeil - 1) {\n            // count is not an integer and we've reached the last iteration of\n            // the loop, so add a \"fractional\" skeleton.\n            //\n            // For example, if count is 3.5, we've already added 3 full\n            // skeletons, so now we add one more skeleton that is 0.5 times the\n            // original width.\n            const width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n            const fractionalPart = count % 1;\n            const fractionalWidth = typeof width === 'number'\n                ? width * fractionalPart\n                : `calc(${width} * ${fractionalPart})`;\n            thisStyle = { ...thisStyle, width: fractionalWidth };\n        }\n        const skeletonSpan = (React.createElement(\"span\", { className: className, style: thisStyle, key: i }, \"\\u200C\"));\n        if (inline) {\n            elements.push(skeletonSpan);\n        }\n        else {\n            // Without the <br />, the skeleton lines will all run together if\n            // `width` is specified\n            elements.push(React.createElement(React.Fragment, { key: i },\n                skeletonSpan,\n                React.createElement(\"br\", null)));\n        }\n    }\n    return (React.createElement(\"span\", { className: containerClassName, \"data-testid\": containerTestId, \"aria-live\": \"polite\", \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation }, Wrapper\n        ? elements.map((el, i) => React.createElement(Wrapper, { key: i }, el))\n        : elements));\n}\n\nfunction SkeletonTheme({ children, ...styleOptions }) {\n    return (React.createElement(SkeletonThemeContext.Provider, { value: styleOptions }, children));\n}\n\nexport { SkeletonTheme, Skeleton as default };\n","// extracted by mini-css-extract-plugin\nexport default {\"skeleton_card\":\"SkeletonCardStyle_skeleton_card__1rK4I\",\"skeleton_card_image_container\":\"SkeletonCardStyle_skeleton_card_image_container__KbFOH\",\"skeleton_card_content\":\"SkeletonCardStyle_skeleton_card_content__rv-PK\",\"skeleton_card_title\":\"SkeletonCardStyle_skeleton_card_title__Ch0Qp\"};","import React from \"react\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport style from './SkeletonCardStyle.module.css';\r\nimport { SkeletonTheme } from \"react-loading-skeleton\";\r\nimport 'react-loading-skeleton/dist/skeleton.css';\r\n\r\nconst SkeletonCard = () => {\r\n  return (\r\n\r\n    <div className={style.skeleton_card}>\r\n      <div className={style.skeleton_card_image_container}>\r\n        <Skeleton height={250} width={250} />\r\n      </div>\r\n\r\n      <div className={style.skeleton_card_content}>\r\n        <Skeleton className={style.skeleton_card_title} />\r\n        <Skeleton className={style.skeleton_card_title} />\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n  );\r\n};\r\nexport default SkeletonCard;","// extracted by mini-css-extract-plugin\nexport default {\"product_card\":\"Card_product_card__F3n+l\",\"product_card_image_container\":\"Card_product_card_image_container__0xKsz\",\"product_card_content\":\"Card_product_card_content__kV2-p\",\"product_card_title\":\"Card_product_card_title__GghfA\",\"card_footer\":\"Card_card_footer__ZcUJp\",\"product_card_price\":\"Card_product_card_price__ZCoeW\",\"purchase_button_add\":\"Card_purchase_button_add__SXAtS\",\"purchase_button_delete\":\"Card_purchase_button_delete__3IAf3\"};","import React, { FC, useContext } from \"react\";\r\nimport Data from \"../../../data/context/context\";\r\nimport Product from \"../../../data/interfaces/Product\";\r\nimport style from './Card.module.css';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nconst Card: React.FC<Product> = ({ id, title, price, description, image, category }) => {\r\n\r\n    const value = useContext(Data);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [buttonStyle, setButtonStyle] = React.useState(\"style.purchase_button_add\")\r\n    const [buttonText, setButtonText] = React.useState(\"Buy\")\r\n\r\n    const handleClick = () => {\r\n\r\n        value.setCurrentProduct({\r\n            category,\r\n            description,\r\n            id,\r\n            image,\r\n            price,\r\n            title,\r\n        }\r\n        )\r\n\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: 'auto' // для прокрутки вверх т.к. после выбора таваров в конце страницыб карточка товара, при переходе на нее, отображается внизу \r\n        })\r\n\r\n        navigate('/full_card')\r\n    }\r\n\r\n\r\n    return (\r\n \r\n                <div\r\n                className={style.product_card}\r\n                id={String(id)}\r\n            // onClick={handleOpenDescription}\r\n            >\r\n                <div className={style.product_card_image_container}>\r\n                    <img\r\n                        src={image}\r\n                        loading=\"lazy\"\r\n                        alt='Product Image' />\r\n                </div>\r\n\r\n                <div className={style.product_card_content}>\r\n                    <div className={style.product_card_title}>{title}</div>\r\n                    <div className={style.card_footer}>\r\n                        <div className={style.product_card_price}>{price + '$'}</div>\r\n                        <button\r\n                            className={style.purchase_button_add}\r\n                            onClick={handleClick}\r\n                        >\r\n                            {buttonText}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Product from \"../../../data/interfaces/Product\";\r\nimport { useInView } from 'react-intersection-observer';\r\nimport SkeletonCard from \"./SkeletonCard\";\r\nimport Card from \"./Card\";\r\n\r\nconst LazyCard: React.FC<Product> = ({ id, title, price, description, image, category }) => {\r\n\r\n    const prop = { id, title, price, description, image, category }\r\n\r\n    const { ref, inView } = useInView({\r\n        triggerOnce: true, // Загружает только один раз\r\n        threshold: 0.2, // Процент видимости для триггера\r\n      });\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            {\r\n                inView ? <Card  {...prop} /> : <SkeletonCard/>\r\n            }\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default LazyCard;","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form_container\":\"searchField_form_container__U2T3+\",\"search_field\":\"searchField_search_field__GiSc7\",\"search_ico\":\"searchField_search_ico__K0xxy\"};","import React, { FC, useContext } from \"react\";\r\nimport Data from \"../../../data/context/context\";\r\nimport Value from \"../../../data/interfaces/Category\";\r\nimport { StringStateProps } from \"../../../data/interfaces/StringStateProps\";\r\nimport style from './searchField.module.css';\r\n\r\nconst SearchField: FC<StringStateProps> = ({ search, setSearch }) => {\r\n\r\n    const value = useContext<Value>(Data);\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setSearch(e.target.value)\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLInputElement>) => setSearch('')\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n    };\r\n    return (\r\n        <div className={style.form_container}>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        className={style.search_field}\r\n                        type=\"text\"\r\n                        placeholder=\"Search...\"\r\n                        value={search}\r\n                        onChange={handleChange}\r\n                        onClick={handleClick}\r\n                    />\r\n                        <img className={style.search_ico}\r\n                            src=\"https://i7.uihere.com/icons/805/425/292/cx-6239a19d5332d5b6eb5d8056dc178ad4.png\" />\r\n                </form>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchField;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"categories\":\"categoriesList_categories__xL8RD\",\"checked_category\":\"categoriesList_checked_category__Q8T8V\"};","import React from \"react\";\r\nimport { CategoriesListProps } from \"../../../data/interfaces/CategoriesListProps\";\r\nimport { CategoryStateProps } from \"../../../data/interfaces/CategoriesListProps\";\r\nimport style from './categoriesList.module.css';\r\n\r\nexport const CategoriesList: React.FC<CategoriesListProps & CategoryStateProps> = (\r\n        {\r\n        category,\r\n        setCategory,\r\n        categories,\r\n        setCategories\r\n    }) => {\r\n\r\n    const handleChangeCategory = (event: React.MouseEvent<HTMLDivElement>) => {\r\n        setCategory(event.currentTarget.className)\r\n    }\r\n\r\n    const firstLetterToUpperCase = (category: string): string => {\r\n        if (!category || category.length === 0) {\r\n            return category;\r\n        }\r\n\r\n        return category[0].toUpperCase() + category.slice(1);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.categories}>\r\n            <h3>Выбрана категория:</h3> \r\n            <h3 className={style.checked_category}>{!category ? 'All' : firstLetterToUpperCase(category)}</h3>\r\n            <hr></hr>\r\n            <div onClick={() => setCategory('')}>All</div>\r\n            {\r\n                categories.map((cat, index) => (\r\n                    <div    key={index} \r\n                            className={cat} \r\n                            onClick={handleChangeCategory}>\r\n                            {firstLetterToUpperCase(cat)}\r\n                    </div>)\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"cards_container\":\"Cards_cards_container__G7u9B\",\"side_bar\":\"Cards_side_bar__JCo8U\",\"cards\":\"Cards_cards__tk0ov\"};","import React, { useContext } from \"react\";\r\nimport Data from \"../../data/context/context\";\r\nimport Product from \"../../data/interfaces/Product\";\r\nimport LazyCard from \"./card/LazyCard\";\r\nimport Value from \"../../data/interfaces/Category\";\r\nimport SearchField from \"./searchField/SearchField\";\r\nimport { CategoriesList } from \"./categoriesList/CategoriesList\";\r\nimport style from './Cards.module.css';\r\nimport SkeletonCard from \"./card/SkeletonCard\";\r\n\r\nexport default function Cards() {\r\n\r\n\r\n    const value = useContext<Value>(Data);\r\n\r\n    const [loading, setLoading] = React.useState(true)\r\n\r\n    const [search, setSearch] = React.useState('')\r\n    const [categories, setCategories] = React.useState<string[]>([''])\r\n    const [category, setCategory] = React.useState<string>('')\r\n\r\n    React.useEffect(() => {\r\n        fetch('https://fakestoreapi.com/products/categories')\r\n            .then(res => res.json())\r\n            .then(json => setCategories(json))\r\n            .finally(() => setLoading(false))\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={style.cards_container}>\r\n            <div className={style.side_bar}>\r\n                <SearchField search={search} setSearch={setSearch} />\r\n                <CategoriesList\r\n                    categories={categories}\r\n                    setCategories={setCategories}\r\n                    category={category}\r\n                    setCategory={setCategory}\r\n                />\r\n            </div>\r\n\r\n\r\n            <div className={style.cards}>\r\n                {loading ?\r\n                    Array(4)\r\n                        .fill('')\r\n                        .map((_, index) => <SkeletonCard key={index} />)\r\n                    :\r\n                    value.products\r\n                        .filter(product => product.title.toLocaleLowerCase().includes(search.toLocaleLowerCase()))\r\n                        .filter(product => product.category.toLocaleLowerCase().includes(category.toLocaleLowerCase()))\r\n                        .map((product: Product) => (<LazyCard key={product.id} {...product} />))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","SkeletonThemeContext","defaultEnableAnimation","styleOptionsToCssProperties","_ref","baseColor","highlightColor","width","height","borderRadius","circle","direction","duration","enableAnimation","customHighlightBackground","style","Skeleton","_ref2","count","wrapper","Wrapper","className","customClassName","containerClassName","containerTestId","styleProp","originalPropsStyleOptions","_b","_c","contextStyleOptions","propsStyleOptions","value","styleOptions","inline","countCeil","Math","ceil","i","thisStyle","fractionalPart","fractionalWidth","skeletonSpan","el","SkeletonCard","_jsxs","children","_jsx","title","price","description","image","category","useContext","Data","navigate","useNavigate","buttonStyle","setButtonStyle","buttonText","setButtonText","String","src","loading","alt","onClick","handleClick","setCurrentProduct","scrollTo","top","behavior","prop","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","Card","search","setSearch","onSubmit","event","preventDefault","type","placeholder","e","CategoriesList","setCategory","categories","setCategories","handleChangeCategory","currentTarget","firstLetterToUpperCase","toUpperCase","slice","cat","index","Cards","setLoading","fetch","then","res","json","finally","cards_container","side_bar","SearchField","cards","fill","_","products","product","toLocaleLowerCase","includes","LazyCard"],"sourceRoot":""}